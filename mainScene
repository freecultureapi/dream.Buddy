// POV-Ray 3.7 Scene File "random_trees3.pov"
// author: Friedrich A. Lohmueller, 2004/Aug-2011/Jan-2013
// email: Friedrich.Lohmueller_at_t-online.de
// homepage: http://www.f-lohmueller.de



//Trees designed by Friedrich A. Lohmueller
// homepage: http://www.f-lohmueller.de
//freeculture.api
//have fun

//         __.....__
//      .'" _  o    "`.
//    .' O (_)     () o`.
//   .           O       .
//  . ()   o__...__    O  .
// . _.--"""       """--._ .
// :"                     ";
//  `-.__    :   :    __.-'
//      """-:   :-"""
//          J     L
//          :     :
//         J       L
//         :       :
//         `._____.'
//

//--------------------------------------------------------------------------
#if (version < 3.7) global_settings{ assumed_gamma 1.0 } #end
#default{ finish{ ambient 0.1 diffuse 0.9 }}
//--------------------------------------------------------------------------
#include "colors.inc"
#include "textures.inc"
#include "glass.inc"
#include "metals.inc"
#include "golds.inc"
#include "stones.inc"
#include "woods.inc"
#include "shapes.inc"
#include "shapes2.inc"
#include "functions.inc"
#include "math.inc"
#include "transforms.inc"
//--------------------------------------------------------------------------
// camera ------------------------------------------------------------------
#declare Camera_0 = camera {ultra_wide_angle angle 75          // front view
                            location  <0.0 , 1.0 ,-3.0>
                            right     x*image_width/image_height
                            look_at   <0.0 , 1.0 , 0.0>}
#declare Camera_1 = camera {/*ultra_wide_angle*/ angle 90       // diagonal view
                            location  <5.0 , 4.5 ,-6.0>
                            right     x*image_width/image_height
                            look_at   <5 , 3.0 , 0.0>}
#declare Camera_2 = camera {/*ultra_wide_angle*/ angle 110        // higher view
                            location  <0.0 , 6.0 , -7.0>
                            right     x*image_width/image_height
                            look_at   <0.0 , 4.0 , 0.0>}
#declare Camera_3 = camera {ultra_wide_angle angle 90            // top view
                            location  <0.0 , 3.0 ,-0.001>
                            right     x*image_width/image_height
                            look_at   <0.0 , 1.0 , 0.0>}
camera{Camera_0}
// sun ---------------------------------------------------------------------
light_source{<1500,2500,-2500> color White}
// sky ---------------------------------------------------------------------
plane{<0,1,0>,1 hollow no_shadow 
       texture{ pigment{ Blood_Sky scale 0.2
                        }
                finish {ambient 1 diffuse 100} }      
       scale 10000}
// fog ---------------------------------------------------------------------
fog{fog_type   2
    distance   50
    color      Pink
    fog_offset 0.1
    fog_alt    2.0
    turbulence 0.8}
// ground ------------------------------------------------------------------
plane { <0,1,0>, 0
        texture{ pigment{color rgb<0.35,0.65,0.0>}
                 normal {bumps 0.75 scale 0.015}
               } // end of texture
      } // end of plane
//--------------------------------------------------------------------------
//---------------------------- objects in scene ----------------------------
//--------------------------------------------------------------------------

#declare Tree =
union{

 isosurface {

    function{ sqrt( x*x + y*y+ z*z) - 1
              - f_noise3d( x*7, y*7, z*7 )*1.05
             }

    contained_by { box { -3, 3 } }
    accuracy 0.2
    max_gradient 57

    texture { pigment{ gradient <0,1,0> turbulence 1.7
                       color_map{
                          [0.0 color rgb<0.07,0.5,0.0>]
                          [0.2 color rgb<0.10,0.7,0.0>]
                          [0.4 color rgb<0.16,0.5,0.1>]
                          [0.6 color rgb<0.20,0.8,0.1>]
                          [0.7 color rgb<0.10,0.3,0.0>]
                          [0.9 color rgb<0.02,0.4,0.0>]
                          [1.0 color rgb<0.06,0.5,0.0>]
                         } // end of color_map
                        scale 0.1
                      } // end of pigment
              normal { bumps 0.5 scale 0.015}
              finish { phong 0.6}
            } // end of texture
    scale 0.9
    translate <0,2.5,0>
  } // end of isosurface ----------------------------------------


 cylinder{ <0,0,0>,<0,2.0,0>,0.2
           texture { pigment { color rgb<0.40,0.25,0.15>}
                     normal  { bumps 0.5 scale <0.005,0.25,0.005>}
                     finish  { phong 0.5}
                   } // end of texture
           scale <1,1,1> rotate<0,0,0> translate<0,0,0>
  } // end of cylinder --------------------------------------
} // --------------------------------------------------- end of Tree

// planting the trees ----------------------------------------------

// Choosing random series
#declare Random_0 = seed ( 342);
#declare Random_1 = seed (2655);
#declare Random_2 = seed (1153);
#declare Random_3 = seed (3333);

union{
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <2.75 , 0,8.75 >}  
             
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <0.75 , 0,9.75 >}
      
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <-1.75 , 0,9.75 >}
             
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <-2.75 , 0,7.75 >}
             
             
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <2.75 , 0,18.75 >}  
             
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <0.75 , 0,19.75 >}
      
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <-1.75 , 0,19.75 >}
             
      object{Tree
             rotate<10*2*(0.5-rand(Random_3)),0,0>
             rotate<0,360*rand(Random_0),0>

             scale  1+0.5*rand(Random_1)

             translate <-2.75 , 0,17.75 >}
             
             
             
       

rotate<0,0,0>
translate<0,0,0>} // end of union --------------------------

//-------------------------------------------------------end           



blob{
  threshold 0.7
  cylinder{<-.4,0,0>,<-.4,2,0>, 1, 1}
  cylinder{<.4,0,0>,<.4,2,0>, 1, 1}
  cylinder{<-.4,0,0>,<-.6,-3,0>, .6, 1}
  cylinder{<.4,0,0>,<.6,-3,0>, .6, 1}

  cylinder{<.4,1.8,0>,<3,1,0>, .6, 1}
  cylinder{<-.4,1.8,0>,<-3,1,0>, .6, 1}

  sphere{  < 0,3.7,0>, 2.75, .75}
  
  scale 0.1
  rotate<0,0,0>
  translate<0,0.25,0>
  texture{T_Wood21}
 }
 
 
#declare DensMap = density {
        radial  rotate y*90 translate z*-5
        translate <0,0,-15*clock>
        warp {turbulence 0.8 octaves 3 lambda 2.5}
        translate <0,0,15*clock>
        scale <1,1,1> 
        colour_map {
                [0.49 rgb 0]
                [0.495 rgb 1]
                [0.5 rgb 4]
                [0.505 rgb 1]
                [0.51 rgb 0]
        }
}
#declare ColMap = density {
        radial rotate y*90 translate z*-5
        translate <0,0,-15*clock>
        warp {turbulence 1.2 octaves 3 lambda 2.5}
        translate <0,0,15*clock>
        scale <1,1,1> 
        colour_map {
                [0.495 Yellow]
                [0.5 White]
                [0.505 Yellow]
        }
}
#declare DensEnding = density {
        spherical scale 10
        colour_map {
                [0 rgb 0*<1,0,0>]
                [0.5 rgb <1,.5,0>*.5]
                [.75 rgb <1,1,0>] 
                [.875 rgb 1] 
                [1 rgb <-1,0,1>]
        }
}

#declare DensMap2 = density {
        radial rotate y*90 translate z*-3
        translate <0,0,-25*clock>
        warp {turbulence 1.3 octaves 3 }
        translate <0,0,25*clock>
        scale <1,1,1>
        colour_map {
                [0.45 rgb 0]
                [0.48 rgb 0.4]
                [0.5 rgb 1]
                [0.52 rgb 0.4]
                [0.55 rgb 0]
        }
}
#declare ColMap2 = density {
        radial rotate y*90 translate z*-3
        translate <0,0,-25*clock>
        warp {turbulence 1.3 octaves 3 }
        translate <0,0,25*clock>
        scale <1,1,1>
        colour_map {
                [0.47 Red]
                [0.5 Orange]
                [0.53 Red]
        }
}
#declare DensEnding2 = density {
        spherical scale <5,5,10>
        translate <0,0,-15*clock>
        warp {turbulence 0.5}
        translate <0,0,15*clock>
        colour_map {
                [0 rgb 0]
                [0.1 rgb 1]
                [.875 rgb 1] 
                [1 rgb <-1,-1,1>]
        }
}

#declare Flame =
union {
cylinder {
        0,z*10,3
                      
        pigment {Clear}
        hollow
        interior {
                media {
                        emission 1
                        /*intervals 5
                        samples 2, 30
                        confidence 0.9999
                        variance 1/1000*/
                        density {ColMap}
                        density {DensMap}
                        density {DensMap rotate z*90}
                        density {DensEnding}
                scale .8
                }
                media {
                        emission .75
                        /*intervals 5
                        samples 2, 30
                        confidence 0.9999
                        variance 1/1000*/
                        density {ColMap2}
                        density {DensMap2}
                        density {DensMap2 rotate z*90}
                        density {DensEnding2}
                scale .8
                }
        
        }
        scale <1,1,3>/.8
}

cylinder {
        0,z*10,3
                      
        pigment {Clear}
        hollow
        interior {
                media {
                        absorption rgb .675
                        //scattering { 2, rgb .5 extinction 1 }                        
                        density {bozo
                        translate <0,0,-5*clock>
                        warp {turbulence 0.2 octaves 1 lambda .5}
                        translate <0,0,5*clock> 
                        scale <1,1,1/3>*3                        
                        color_map {
                        [0 rgb 0]
                        [1 rgb 1]         
                        }
                        }
                        density {
                        spherical scale <5,5,10>
                        translate <0,0,-5*clock>
                        warp {turbulence 0.5}
                        translate <0,0,5*clock>
                        color_map {
                        [0 rgb 0]
                        [1 rgb 1]         
                        }
                        }
                scale .8
                }
        }
        scale <.675,.675,2>/.8
        rotate -x*10
        translate <0,0,20>
}

}


background {rgb .125}


object{Flame}

#declare numLights=5;
union {
        #declare i=0;
        #while (i<10)
                #declare i = i + 10/numLights;
                light_source {
                        z*i
                        color Red*1.9/numLights
                        media_interaction off
                        fade_distance 5 fade_power 0.8
                }
                light_source {
                        z*i
                        color Green*1.5/numLights
                        media_interaction off
                        fade_distance 5.5 fade_power 4
                }
        #end        
        rotate -x*30
}

 
